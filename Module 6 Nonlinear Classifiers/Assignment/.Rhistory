mutate(prior_probability = n / sum(n)) |>
select(Status, prior_probability)
prior_prob <- as.data.frame(t(prior_prob))
colnames(prior_prob) <- prior_prob[1, ]
prior_prob <- prior_prob[-1,]
# Table of predictors distribution based on status and prior probabilities
table <- cbind(prior_prob,summary_stats) |> gt()
# Table of predictors distribution based on status and prior probabilities
table <- bind_rows(prior_prob,summary_stats) |> gt()
View(table)
waste_water <- tibble::tibble(
Ss_In = c(168,156,176,256,230,116,242,242,174,1004,1228,964,2008),
Sed_In = c(3,3,3.5,3,5,3,7,4.5,2.5,35,46,17,32),
Cond_In = c(1814,1358,2200,2070,1410,1238,1315,1183,1110,1218,1889,2120,1257),
Ss_Out = c(15,14,16,27,131,104,104,78,73,81,82.4,20,13),
Sed_Out = c(.001,.01,.005,.2,3.5,.06,.01,.02,1.5,1172,1932,1030,1038),
Cond_Out = c(1879,1425,2140,2700,1575,1221,1434,1374,1256,33.3,43.1,1966,1289),
Status = c("ok", "ok", "ok", "ok", "settler", "settler", "settler", "settler", "settler",
"solid", "solid", "solid", "solid"))
gt(waste_water)
summary_stats <- waste_water |> group_by(Status) |>
summarize(mean_Ss_In = mean(Ss_In),
sd_Ss_In = sd(Ss_In),
mean_Sed_In = mean(Sed_In),
sd_Sed_In = sd(Sed_In),
mean_Cond_In = mean(Cond_In),
sd_Cond_In = sd(Cond_In),
mean_Ss_Out = mean(Ss_Out),
sd_Ss_Out = sd(Ss_Out),
mean_Sed_Out = mean(Sed_Out),
sd_Sed_Out = sd(Sed_Out),
mean_Cond_Out = mean(Cond_Out),
sd_Cond_Out = sd(Cond_Out))
summary_stats <- as.data.frame(t(summary_stats))
colnames(summary_stats) <- summary_stats[1, ]
summary_stats <- summary_stats[-1, ]
prior_prob <- waste_water |>
count(Status) |>
mutate(prior_probability = n / sum(n)) |>
select(Status, prior_probability)
prior_prob <- as.data.frame(t(prior_prob))
colnames(prior_prob) <- prior_prob[1, ]
prior_prob <- prior_prob[-1,]
# Table of predictors distribution based on status and prior probabilities
table <- bind_rows(prior_prob,summary_stats) |> gt()
View(table)
table$`_data`
View(prior_prob)
prior_prob <- bind_rows(data.frame(Status = "prior_prob"), prior_prob)
# Table of predictors distribution based on status and prior probabilities
table <- bind_rows(prior_prob,summary_stats) |> gt()
table$`_data`
View(summary_stats)
View(prior_prob)
View(summary_stats)
View(prior_prob)
View(summary_stats)
prior_prob <- as.data.frame(t(prior_prob))
colnames(prior_prob) <- prior_prob[1, ]
prior_prob <- prior_prob[-1,]
View(prior_prob)
prior_prob <- waste_water |>
count(Status) |>
mutate(prior_probability = n / sum(n)) |>
select(Status, prior_probability)
prior_prob <- as.data.frame(t(prior_prob))
colnames(prior_prob) <- prior_prob[1, ]
prior_prob <- prior_prob[-1,]
waste_water <- tibble::tibble(
Ss_In = c(168,156,176,256,230,116,242,242,174,1004,1228,964,2008),
Sed_In = c(3,3,3.5,3,5,3,7,4.5,2.5,35,46,17,32),
Cond_In = c(1814,1358,2200,2070,1410,1238,1315,1183,1110,1218,1889,2120,1257),
Ss_Out = c(15,14,16,27,131,104,104,78,73,81,82.4,20,13),
Sed_Out = c(.001,.01,.005,.2,3.5,.06,.01,.02,1.5,1172,1932,1030,1038),
Cond_Out = c(1879,1425,2140,2700,1575,1221,1434,1374,1256,33.3,43.1,1966,1289),
Status = c("ok", "ok", "ok", "ok", "settler", "settler", "settler", "settler", "settler",
"solid", "solid", "solid", "solid"))
# Calculate means and standard deviations by Status
summary_stats <- waste_water |> group_by(Status) |>
summarize(mean_Ss_In = mean(Ss_In),
sd_Ss_In = sd(Ss_In),
mean_Sed_In = mean(Sed_In),
sd_Sed_In = sd(Sed_In),
mean_Cond_In = mean(Cond_In),
sd_Cond_In = sd(Cond_In),
mean_Ss_Out = mean(Ss_Out),
sd_Ss_Out = sd(Ss_Out),
mean_Sed_Out = mean(Sed_Out),
sd_Sed_Out = sd(Sed_Out),
mean_Cond_Out = mean(Cond_Out),
sd_Cond_Out = sd(Cond_Out))
summary_stats <- tibble::as_tibble(t(summary_stats))
colnames(summary_stats) <- summary_stats[1, ]
summary_stats <- summary_stats[-1, ]
summary_stats <- summary_stats[-1, ] |> gt()
summary_stats |> gt()
View(summary_stats)
summary_stats |> tibble()|> gt()
summary_stats |> tibble()
summary_stats |> as_tibble()
waste_water <- tibble::tibble(
Ss_In = c(168,156,176,256,230,116,242,242,174,1004,1228,964,2008),
Sed_In = c(3,3,3.5,3,5,3,7,4.5,2.5,35,46,17,32),
Cond_In = c(1814,1358,2200,2070,1410,1238,1315,1183,1110,1218,1889,2120,1257),
Ss_Out = c(15,14,16,27,131,104,104,78,73,81,82.4,20,13),
Sed_Out = c(.001,.01,.005,.2,3.5,.06,.01,.02,1.5,1172,1932,1030,1038),
Cond_Out = c(1879,1425,2140,2700,1575,1221,1434,1374,1256,33.3,43.1,1966,1289),
Status = c("ok", "ok", "ok", "ok", "settler", "settler", "settler", "settler", "settler",
"solid", "solid", "solid", "solid"))
# Calculate means and standard deviations by Status
summary_stats <- waste_water |> group_by(Status) |>
summarize(mean_Ss_In = mean(Ss_In),
sd_Ss_In = sd(Ss_In),
mean_Sed_In = mean(Sed_In),
sd_Sed_In = sd(Sed_In),
mean_Cond_In = mean(Cond_In),
sd_Cond_In = sd(Cond_In),
mean_Ss_Out = mean(Ss_Out),
sd_Ss_Out = sd(Ss_Out),
mean_Sed_Out = mean(Sed_Out),
sd_Sed_Out = sd(Sed_Out),
mean_Cond_Out = mean(Cond_Out),
sd_Cond_Out = sd(Cond_Out))
summary_stats <- as.data.frame(t(summary_stats))
colnames(summary_stats) <- summary_stats[1, ]
summary_stats <- summary_stats[-1, ]
summary_stats |> as_tibble()
summary_stats |> gt()
summary_stats
waste_water <- tibble::tibble(
Ss_In = c(168,156,176,256,230,116,242,242,174,1004,1228,964,2008),
Sed_In = c(3,3,3.5,3,5,3,7,4.5,2.5,35,46,17,32),
Cond_In = c(1814,1358,2200,2070,1410,1238,1315,1183,1110,1218,1889,2120,1257),
Ss_Out = c(15,14,16,27,131,104,104,78,73,81,82.4,20,13),
Sed_Out = c(.001,.01,.005,.2,3.5,.06,.01,.02,1.5,1172,1932,1030,1038),
Cond_Out = c(1879,1425,2140,2700,1575,1221,1434,1374,1256,33.3,43.1,1966,1289),
Status = c("ok", "ok", "ok", "ok", "settler", "settler", "settler", "settler", "settler",
"solid", "solid", "solid", "solid"))
# Calculate means and standard deviations by Status
summary_stats <- waste_water |> group_by(Status) |>
summarize(mean_Ss_In = mean(Ss_In),
sd_Ss_In = sd(Ss_In),
mean_Sed_In = mean(Sed_In),
sd_Sed_In = sd(Sed_In),
mean_Cond_In = mean(Cond_In),
sd_Cond_In = sd(Cond_In),
mean_Ss_Out = mean(Ss_Out),
sd_Ss_Out = sd(Ss_Out),
mean_Sed_Out = mean(Sed_Out),
sd_Sed_Out = sd(Sed_Out),
mean_Cond_Out = mean(Cond_Out),
sd_Cond_Out = sd(Cond_Out))
summary_stats <- as.data.frame(t(summary_stats))
colnames(summary_stats) <- summary_stats[1, ]
summary_stats <- summary_stats[-1, ]
summary_stats
# Calculate prior probabilities
prior_prob <- waste_water |>
count(Status) |>
mutate(prior_probability = n / sum(n)) |>
select(Status, prior_probability)
prior_prob <- as.data.frame(t(prior_prob))
colnames(prior_prob) <- prior_prob[1, ]
prior_prob <- prior_prob[-1,]
# Table of predictors distribution based on status and prior probabilities
table <- bind_rows(prior_prob,summary_stats)
table
library(klaR)
install.packages("klaR")
library(klaR)
waste_water$Status <- factor(waste_water$Status)
# Visualize distributions of predictors conditional on status
# Density plots for each predictor
plot_density <- function(data, var, status_var) {
ggplot(data, aes(x = !!sym(var), color = !!sym(status_var))) +
geom_density() +
labs(x = var, y = "Density", color = status_var) +
theme_minimal()
}
# Density plots for Ss_In conditional on Status
plot_density(waste_water, "Ss_In", "Status")
# Density plots for Sed_In conditional on Status
plot_density(waste_water, "Sed_In", "Status")
# Density plots for Cond_In conditional on Status
plot_density(waste_water, "Cond_In", "Status")
# Density plots for Ss_Out conditional on Status
plot_density(waste_water, "Ss_Out", "Status")
# Density plots for Sed_Out conditional on Status
plot_density(waste_water, "Sed_Out", "Status")
# Density plots for Cond_Out conditional on Status
plot_density(waste_water, "Cond_Out", "Status")
View(summary_stats)
table
round(table,4)
round(table,4)
table
waste_water <- tibble::tibble(
Ss_In = c(168,156,176,256,230,116,242,242,174,1004,1228,964,2008),
Sed_In = c(3,3,3.5,3,5,3,7,4.5,2.5,35,46,17,32),
Cond_In = c(1814,1358,2200,2070,1410,1238,1315,1183,1110,1218,1889,2120,1257),
Ss_Out = c(15,14,16,27,131,104,104,78,73,81,82.4,20,13),
Sed_Out = c(.001,.01,.005,.2,3.5,.06,.01,.02,1.5,1172,1932,1030,1038),
Cond_Out = c(1879,1425,2140,2700,1575,1221,1434,1374,1256,33.3,43.1,1966,1289),
Status = c("ok", "ok", "ok", "ok", "settler", "settler", "settler", "settler", "settler",
"solid", "solid", "solid", "solid"))
# Calculate means and standard deviations by Status
summary_stats <- waste_water |> group_by(Status) |>
summarize(mean_Ss_In = mean(Ss_In),
sd_Ss_In = sd(Ss_In),
mean_Sed_In = mean(Sed_In),
sd_Sed_In = sd(Sed_In),
mean_Cond_In = mean(Cond_In),
sd_Cond_In = sd(Cond_In),
mean_Ss_Out = mean(Ss_Out),
sd_Ss_Out = sd(Ss_Out),
mean_Sed_Out = mean(Sed_Out),
sd_Sed_Out = sd(Sed_Out),
mean_Cond_Out = mean(Cond_Out),
sd_Cond_Out = sd(Cond_Out))
summary_stats <- as.data.frame(t(summary_stats))
View(summary_stats)
colnames(summary_stats) <- summary_stats[1, ]
summary_stats <- summary_stats[-1, ]
# Calculate prior probabilities
prior_prob <- waste_water |>
count(Status) |>
mutate(prior_probability = n / sum(n)) |>
select(Status, prior_probability)
# Calculate prior probabilities
prior_prob <- waste_water |>
count(Status) |>
mutate(prior_probability = n / sum(n)) |>
select(Status, prior_probability)
library(tidyverse)
library(gt)
library(caret)
library(e1071)
library(AppliedPredictiveModeling)
library(pROC)
library(dplyr)
library(klaR)
library(tidyverse)
library(gt)
library(caret)
library(e1071)
library(AppliedPredictiveModeling)
library(pROC)
library(dplyr)
library(klaR)
#| echo: true
# Data 6.1.a
data61a <- tibble::tibble(
X1 = 1:6,
X2 = 2:7,
X3 = seq(30, 80, by = 10),)
class61a <- c("A", "B", "A", "B", "B", "A")
gt(data61a)
# data 6.1.b
data61b <- tibble::tribble(
~X1, ~X2, ~X3,
9, 4, 15,
7, 8, 45,
8, 7, 75)
gt(data61b)
waste_water <- tibble::tibble(
Ss_In = c(168,156,176,256,230,116,242,242,174,1004,1228,964,2008),
Sed_In = c(3,3,3.5,3,5,3,7,4.5,2.5,35,46,17,32),
Cond_In = c(1814,1358,2200,2070,1410,1238,1315,1183,1110,1218,1889,2120,1257),
Ss_Out = c(15,14,16,27,131,104,104,78,73,81,82.4,20,13),
Sed_Out = c(.001,.01,.005,.2,3.5,.06,.01,.02,1.5,1172,1932,1030,1038),
Cond_Out = c(1879,1425,2140,2700,1575,1221,1434,1374,1256,33.3,43.1,1966,1289))
Status <- c("ok", "ok", "ok", "ok", "settler", "settler", "settler", "settler", "settler",
"solid", "solid", "solid", "solid"))
waste_water <- tibble::tibble(
Ss_In = c(168,156,176,256,230,116,242,242,174,1004,1228,964,2008),
Sed_In = c(3,3,3.5,3,5,3,7,4.5,2.5,35,46,17,32),
Cond_In = c(1814,1358,2200,2070,1410,1238,1315,1183,1110,1218,1889,2120,1257),
Ss_Out = c(15,14,16,27,131,104,104,78,73,81,82.4,20,13),
Sed_Out = c(.001,.01,.005,.2,3.5,.06,.01,.02,1.5,1172,1932,1030,1038),
Cond_Out = c(1879,1425,2140,2700,1575,1221,1434,1374,1256,33.3,43.1,1966,1289))
Status <- c("ok", "ok", "ok", "ok", "settler", "settler", "settler", "settler", "settler",
"solid", "solid", "solid", "solid")
gt(waste_water)
# Calculate means and standard deviations by Status
summary_stats <- waste_water |> group_by(Status) |>
summarize(mean_Ss_In = mean(Ss_In),
sd_Ss_In = sd(Ss_In),
mean_Sed_In = mean(Sed_In),
sd_Sed_In = sd(Sed_In),
mean_Cond_In = mean(Cond_In),
sd_Cond_In = sd(Cond_In),
mean_Ss_Out = mean(Ss_Out),
sd_Ss_Out = sd(Ss_Out),
mean_Sed_Out = mean(Sed_Out),
sd_Sed_Out = sd(Sed_Out),
mean_Cond_Out = mean(Cond_Out),
sd_Cond_Out = sd(Cond_Out))
waste_water <- tibble::tibble(
Ss_In = c(168,156,176,256,230,116,242,242,174,1004,1228,964,2008),
Sed_In = c(3,3,3.5,3,5,3,7,4.5,2.5,35,46,17,32),
Cond_In = c(1814,1358,2200,2070,1410,1238,1315,1183,1110,1218,1889,2120,1257),
Ss_Out = c(15,14,16,27,131,104,104,78,73,81,82.4,20,13),
Sed_Out = c(.001,.01,.005,.2,3.5,.06,.01,.02,1.5,1172,1932,1030,1038),
Cond_Out = c(1879,1425,2140,2700,1575,1221,1434,1374,1256,33.3,43.1,1966,1289),
Status = c("ok", "ok", "ok", "ok", "settler", "settler", "settler", "settler", "settler",
"solid", "solid", "solid", "solid"))
gt(waste_water)
waste_water <- tibble::tibble(
Ss_In = c(168,156,176,256,230,116,242,242,174,1004,1228,964,2008),
Sed_In = c(3,3,3.5,3,5,3,7,4.5,2.5,35,46,17,32),
Cond_In = c(1814,1358,2200,2070,1410,1238,1315,1183,1110,1218,1889,2120,1257),
Ss_Out = c(15,14,16,27,131,104,104,78,73,81,82.4,20,13),
Sed_Out = c(.001,.01,.005,.2,3.5,.06,.01,.02,1.5,1172,1932,1030,1038),
Cond_Out = c(1879,1425,2140,2700,1575,1221,1434,1374,1256,33.3,43.1,1966,1289),
Status = c("ok", "ok", "ok", "ok", "settler", "settler", "settler", "settler", "settler",
"solid", "solid", "solid", "solid"))
gt(waste_water)
# Calculate means and standard deviations by Status
summary_stats <- waste_water |> group_by(Status) |>
summarize(mean_Ss_In = mean(Ss_In),
sd_Ss_In = sd(Ss_In),
mean_Sed_In = mean(Sed_In),
sd_Sed_In = sd(Sed_In),
mean_Cond_In = mean(Cond_In),
sd_Cond_In = sd(Cond_In),
mean_Ss_Out = mean(Ss_Out),
sd_Ss_Out = sd(Ss_Out),
mean_Sed_Out = mean(Sed_Out),
sd_Sed_Out = sd(Sed_Out),
mean_Cond_Out = mean(Cond_Out),
sd_Cond_Out = sd(Cond_Out))
summary_stats <- as.data.frame(t(summary_stats))
colnames(summary_stats) <- summary_stats[1, ]
summary_stats <- summary_stats[-1, ]
# Calculate prior probabilities
prior_prob <- waste_water |>
count(Status) |>
mutate(prior_probability = n / sum(n)) |>
select(Status, prior_probability)
View(waste_water)
View(summary_stats)
View(waste_water)
View(summary_stats)
library(tidyverse)
library(gt)
library(caret)
library(e1071)
library(AppliedPredictiveModeling)
library(pROC)
library(dplyr)
library(klaR)
#| echo: true
# Data 6.1.a
data61a <- tibble::tibble(
X1 = 1:6,
X2 = 2:7,
X3 = seq(30, 80, by = 10),)
class61a <- c("A", "B", "A", "B", "B", "A")
gt(data61a)
# data 6.1.b
data61b <- tibble::tribble(
~X1, ~X2, ~X3,
9, 4, 15,
7, 8, 45,
8, 7, 75)
gt(data61b)
ctrl <- trainControl(method = "cv",
number = 5,
summaryFunction = twoClassSummary,
classProbs = TRUE,
savePredictions = TRUE)
# Create KNN model without preprocessing
set.seed(123)
knnFit_wo <- train(x = data61a,
y = class61a,
method = "knn",
metric = "ROC",
tuneLength = 10,
trControl = ctrl)
knnFit_wo
# Predict class using data61b
knnFit_wo_predictions <- predict(knnFit_wo, newdata = data61b, type = "raw")
knnFit_wo_predictions <- data.frame(class = knnFit_wo_predictions)
knnFit_wo_predictions <- cbind(data61b, knnFit_wo_predictions)
knnFit_wo_predictions |> gt() |>
tab_header(title = "KNN model test result without preprocessing")
# No missing data
# All are highly correlated to the outcome
correlation_matrix <- cor(data61a)
# Center and scale
data61a_scaled <- scale(data61a)
# Create KNN model with preprocessing
set.seed(123)
knnFit_w <- train(x = data61a_scaled,
y = class61a,
method = "knn",
tuneLength = 10,
metric = "ROC",
trControl = ctrl)
knnFit_w
# Predict class using data61b
knnFit_w_predictions <- predict(knnFit_w, newdata = data61b, type = "raw")
knnFit_w_predictions <- data.frame(class = knnFit_w_predictions)
knnFit_w_predictions <- cbind(data61b, knnFit_w_predictions)
knnFit_w_predictions |> gt() |>
tab_header(title = "KNN model test result with preprocessing")
Bag_of_words <- tibble::tibble(
Money = c(3,1,0,0,0),
Free = c(0,2,0,0,1),
For = c(0,1,1,1,0),
Gambling = c(0,1,1,0,0),
Fun = c(0,1,1,3,0),
Machine = c(0,0,0,1,1),
Learning = c(0,0,0,1,1))
Spam <- c("True", "True", "True", "False", "False")
gt(Bag_of_words)
# Return for "machine learning for free" email
target_level <- c(Money = 0, Free = 1, For = 1, Gambling = 0, Fun = 0,
Machine = 1, Learning = 1)
bow_list <- split(Bag_of_words, seq(nrow(Bag_of_words)))
bow_list <- lapply(bow_list, function(row) as.numeric(unlist(row)))
# Calcualte KNN using Euclidean distance
euclid_dist <- function(x, y) sqrt(sum((x - y)^2))
distances <- sapply(bow_list, function(x) euclid_dist(x, target_level))
min_index <- which.min(distances)
closest_spam <- Spam[min_index]
cat("Spam prediction for machine learning for free = ", closest_spam)
# Table Euclidean distance
distances <- data.frame(Euclidean_distance = round(distances,4))
distances |> gt()
# KNN model with K=3 using Euclidean distance
k <- 3
nearest_indices <- order(distances)[1:k]
nearest_labels <- Spam[nearest_indices]
# Count occurrences of "True" (spam) and "False" (not spam)
count_true <- sum(nearest_labels == "True")
count_false <- sum(nearest_labels == "False")
# Determine the majority label
if (count_true > count_false) {target_label <- "True"} else {
target_label <- "False"}
cat("Spam prediction at KNN K=3 is", target_label)
# Calculate using Manhattan distance
manhattan_dist <- function(x, y) sum(abs(x - y))
distances_m <- sapply(bow_list, function(x) manhattan_dist(x, target_level))
# KNN model with K=3
nearest_indices_m <- order(distances_m)[1:k]
nearest_labels_m <- Spam[nearest_indices_m]
# Count occurrences of "True" (spam) and "False" (not spam)
count_true_m <- sum(nearest_labels_m == "True")
count_false_m <- sum(nearest_labels_m == "False")
# Determine the majority label
if (count_true_m > count_false_m) {target_label_m <- "True"} else {
target_label_m <- "False"}
cat("Spam prediction at KNN K= 3 using Manhattan distribution is",
target_label_m)
# Normalize the list
bow_list_cos <- lapply(split(as.matrix(Bag_of_words), seq(nrow(Bag_of_words))),
function(row) row / sqrt(sum(row^2)))
target_point_cos <- target_level / sqrt(sum(target_level^2))
# Calculate cosine similarity
cosine_similarity <- function(x, y) sum(x * y)
similarities <- sapply(bow_list_cos,
function(x) cosine_similarity(x, target_point_cos))
nearest_indices_cos <- order(similarities, decreasing = TRUE)[1:k]
nearest_labels_cos <- Spam[nearest_indices_cos]
# Count occurrences of "True" (spam) and "False" (not spam)
count_true_cos <- sum(nearest_labels_cos == "True")
count_false_cos <- sum(nearest_labels_cos == "False")
# Determine the majority label
if (count_true_cos > count_false_cos) {target_label_cos <- "True"} else {
target_label_cos <- "False"}
cat("Spam prediction at KNN K= 3 using cosine similarity is",
target_label_cos)
waste_water <- tibble::tibble(
Ss_In = c(168,156,176,256,230,116,242,242,174,1004,1228,964,2008),
Sed_In = c(3,3,3.5,3,5,3,7,4.5,2.5,35,46,17,32),
Cond_In = c(1814,1358,2200,2070,1410,1238,1315,1183,1110,1218,1889,2120,1257),
Ss_Out = c(15,14,16,27,131,104,104,78,73,81,82.4,20,13),
Sed_Out = c(.001,.01,.005,.2,3.5,.06,.01,.02,1.5,1172,1932,1030,1038),
Cond_Out = c(1879,1425,2140,2700,1575,1221,1434,1374,1256,33.3,43.1,1966,1289),
Status = c("ok", "ok", "ok", "ok", "settler", "settler", "settler", "settler", "settler",
"solid", "solid", "solid", "solid"))
gt(waste_water)
# Calculate means and standard deviations by Status
summary_stats <- waste_water |> group_by(Status) |>
summarize(mean_Ss_In = mean(Ss_In),
sd_Ss_In = sd(Ss_In),
mean_Sed_In = mean(Sed_In),
sd_Sed_In = sd(Sed_In),
mean_Cond_In = mean(Cond_In),
sd_Cond_In = sd(Cond_In),
mean_Ss_Out = mean(Ss_Out),
sd_Ss_Out = sd(Ss_Out),
mean_Sed_Out = mean(Sed_Out),
sd_Sed_Out = sd(Sed_Out),
mean_Cond_Out = mean(Cond_Out),
sd_Cond_Out = sd(Cond_Out))
summary_stats <- as.data.frame(t(summary_stats))
colnames(summary_stats) <- summary_stats[1, ]
summary_stats <- summary_stats[-1, ]
# Calculate prior probabilities
prior_prob <- waste_water |>
count(Status) |>
mutate(prior_probability = n / sum(n)) |>
select(Status, prior_probability)
status_counts <- waste_water %>%
count(Status) %>%
rename(n = n)  # Rename count column to 'n'
# Calculate prior probabilities
prior_prob <- status_counts %>%
mutate(prior_probability = n / sum(n)) %>%
select(Status, prior_probability)
