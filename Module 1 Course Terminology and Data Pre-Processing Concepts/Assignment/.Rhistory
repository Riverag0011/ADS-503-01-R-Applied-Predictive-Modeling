geom_histogram(bins = 20, binwidth = .6, fill = "pink", color = "white") +
geom_histogram(bins = 20, aes(x = !!sym(paste("gamma_", predictor, sep = ""))),
binwidth = .6, fill = "darkgray", color = "white",  alpha = .7) +
labs(title = paste("Histogram of Box-Cox Transformed gamma for", predictor))
)
}
# Run predictors through the loop:
# Only Ca and Al have more than 50% percent diff for skewness.
predictor_columns <- c("Ca","Al", "Na")
for (predictor in predictor_columns) {
plot_histogram(Glass, predictor)
}
# Another look at gamam_Ca:
Glass |>
ggplot(aes(x = gamma_Ca)) +
geom_histogram(bins= 10, color = "white") +
labs(title ="Histogram of Box-Cox Transformed gamma for Ca")
# Another look at gamam_Na:
Glass |>
ggplot(aes(x = gamma_Na)) +
geom_histogram(bins= 10, color = "white") +
labs(title ="Histogram of Box-Cox Transformed gamma for Na")
csv <- list.files(here::here(), pattern = 'hcvdat0.csv', recursive = TRUE) |> head(1)
hcv <- read_csv(csv, show_col_types = FALSE) |>
select(-c(1, Category, Age, Sex))
str(hcv)
library(naniar)
# Identify missing values:
vis_miss(hcv)
# Missing values for each predictor:
hcv[hcv == ""] <- NA
na_value <- sapply(hcv, function(x) sum(is.na(x)))
print("Original: Missing values by each predictor")
na_value
# Impute mode into missing values of each predictor:
mode_impute <- function(x) {
mode_val <- names(sort(table(x), decreasing = TRUE))[1]
x[is.na(x)] <- mode_val
return(x)
}
# Apply mode imputation to each column
hcv_imputed <- as.data.frame(lapply(hcv, mode_impute))
hcv_imputed[] <- lapply(hcv_imputed, function(x) as.numeric(as.factor(x)))
# Check imputed missing values:
impt_na_value <- sapply(hcv_imputed, function(x) sum(is.na(x)))
print("hcv_imputed: Missing values by each predictor")
impt_na_value
# Create historgram fro each predictors:
hcv_imputed |>
pivot_longer(cols = everything(), names_to = "variable", values_to = "value") |>
ggplot(aes(x = value)) +
geom_histogram(bins = 100) +
facet_wrap(~ variable, scales = 'free', ncol = 4) +
theme_bw() +
labs(title = 'Histogram of All Variables', x = NULL, y = "Count")
# Skewness scores:
print("Skewness Scores")
hcv_imputed |>
sapply(skewness) |>
round(2)
# Calculate boxcoxtrans gamma transformation for each predictors:
for (col in names(hcv_imputed)) {
bct_h <- BoxCoxTrans(hcv_imputed[[col]], na.action = na.pass)
hcv_imputed[[paste0("gamma_", col)]] <- predict(bct_h, hcv_imputed[[col]])
}
# Skewness scores:
skew <- hcv_imputed |>
sapply(skewness) |>
round(2)
skew |>
as.data.frame()
print(skew)
# Calculate % difference for each predictors skewness score:
calculate_diff0 <- function(col) {
return (((skew[[col]] - skew[[paste0("gamma_", col)]]) /
((skew[[col]] + skew[[paste0("gamma_", col)]]) / 2)) * 100)
}
gpredictors0 <- c("ALB", "ALP", "ALT", "AST", "BIL", "CHE", "CHOL", "CREA", "GGT", "PROT")
results_list0 <- lapply(gpredictors0, calculate_diff0)
names(results_list0) <- paste0(gpredictors0, "_diff")
print("Box-Cox Improvement Skewness Score % diff")
print(results_list0)
# Create histogram loop:
plot_histogram0 <- function(hcv_imputed, predictor0) {
print(
ggplot(hcv_imputed, aes(x = !!sym(predictor0))) +
geom_histogram(bins = 10, binwidth = 10, fill = "pink", color = "white") +
geom_histogram(bins = 10, aes(x = !!sym(paste("gamma_", predictor0, sep = ""))),
binwidth = 10, fill = "darkgray", color = "white", alpha = .8) +
labs(title = paste("Histogram of Box-Cox Transformed gamma for", predictor0))
)
}
# Run predictors through the loop:
# Only Ca and Al have more than 50% percent diff for skewness.
predictor_columns0 <- c("ALT","AST", "GGT")
for (predictor0 in predictor_columns0) {
plot_histogram0(hcv_imputed, predictor0)
}
# Another look at gamam_ALT:
hcv_imputed |>
ggplot(aes(x = gamma_ALT)) +
geom_histogram(bins= 12, color = "white") +
labs(title ="Histogram of Box-Cox Transformed gamma for ALT")
# Another look at gamam_AST:
hcv_imputed |>
ggplot(aes(x = gamma_AST)) +
geom_histogram(bins= 12, color = "white") +
labs(title ="Histogram of Box-Cox Transformed gamma for AST")
# Another look at gamam_GGT:
hcv_imputed |>
ggplot(aes(x = gamma_GGT)) +
geom_histogram(bins= 12, color = "white") +
labs(title ="Histogram of Box-Cox Transformed gamma for GGT")
library(tidyverse)
library(GGally)
skew |>
as.data.frame() |>
head()
skew_p_diff <- do.call(rbind, results_list)
skew_p_diff
skew_p_diff0 <- do.call(rbind, results_list0)
print("Box-Cox Improvement Skewness Score % diff")
skew_p_diff0
skew_p_diff0 <- round((do.call(rbind, results_list0), 2)
skew_p_diff0 <- (do.call(rbind, round(results_list0,2)))
skew_p_diff <- round((do.call(rbind, results_list)),2)
print("Box-Cox Improvement Skewness Score % diff")
skew_p_diff
skew_p_diff0 <- round((do.call(rbind, results_list0)),2)
print("Box-Cox Improvement Skewness Score % diff")
skew_p_diff0
skew_p_diff0 <- t(round((do.call(rbind, results_list0)),2))
skew_p_diff0
x = [1, 3, 3, 5, 5, 6, 6, 7, 8, 9, 10]
X |>
sapply(skewness)
X |>
sapply(skewness)
library(tidyverse)
library(GGally)
X |>
sapply(skewness)
library(tidyverse)
library(GGally)
x |>
sapply(skewness)
x = [1, 3, 3, 5, 5, 6, 6, 7, 8, 9, 10]
library(tidyverse)
library(GGally)
x = [1, 3, 3, 5, 5, 6, 6, 7, 8, 9, 10]
library(caret)
x = [1, 3, 3, 5, 5, 6, 6, 7, 8, 9, 10]
x = c(1, 3, 3, 5, 5, 6, 6, 7, 8, 9, 10)
x |>
sapply(skewness)
if (!requireNamespace("e1071", quietly = TRUE)) {
install.packages("e1071")
}
library(e1071)
# Define the dataset
x <- c(1, 3, 3, 5, 5, 6, 6, 7, 8, 9, 10)
# Compute skewness
skew <- skewness(x)
# Print the skewness
print(skew)
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("e1071", quietly = TRUE)) {
install.packages("e1071")
}
library(e1071)
# Define the dataset
x <- c(1, 3, 3, 5, 5, 6, 6, 7, 8, 9, 10)
# Compute skewness
skew <- skewness(x)
# Print the skewness
print(skew)
k <- 2
# Number of samples
num_samples <- 100
# Sample size
sample_size <- 100
# Generate samples from gamma distribution
samples <- replicate(num_samples, rgamma(sample_size, shape = k))
# Calculate skewness for each sample
skewness_values <- apply(samples, 2, skewness)
# Compute the most likely skewness value
most_likely_skewness <- sqrt(4 / k)
# Print the most likely skewness value
print(most_likely_skewness)
library(caret)
x |>
sapply(skewness)
x <- rgamma(100, 2)
x |>
skewness(x)
ata <- c(10, 15, 12, 20, 102)
# Perform z-scaling
z_scaled_data <- scale(data)
data <- c(10, 15, 12, 20, 102)
# Perform z-scaling
z_scaled_data <- scale(data)
# Print the z-scaled data
print(z_scaled_data)
data <- c(10, 15, 12, 20, 102)
# Perform min-max scaling
min_value <- min(data)
max_value <- max(data)
min_max_scaled_data <- (data - min_value) / (max_value - min_value)
# Print the min-max scaled data
print(min_max_scaled_data)
x1 <- rnorm(100)
x2 <- rnorm(100)
x3 <- rnorm(100)
y <- matrix(c(x1, x2, x3), nrow = 100, ncol = 3)
# Perform PCA
pca_result <- prcomp(y)
# Proportion of variation explained by PC1
prop_var_pc1 <- pca_result$sdev[1]^2 / sum(pca_result$sdev^2)
# Print the proportion of variation explained by PC1
print(prop_var_pc1)
x1 <- rnorm(100)
x2 <- rnorm(100)
x3 <- x1 + x2
y <- matrix(c(x1, x2, x3), nrow = 100, ncol = 3)
# Perform PCA
pca_result <- prcomp(y)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 99% of the variance
num_components_99 <- which.max(cumulative_var >= 0.99)
# Print the result
print(num_components_99)
ata <- matrix(c(1, 6, 8,
2, 5, 7,
3, 4, 9), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Extract the loadings for PC2
loadings_pc2 <- pca_result$rotation[, 2]
data <- matrix(c(1, 6, 8,
2, 5, 7,
3, 4, 9), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Extract the loadings for PC2
loadings_pc2 <- pca_result$rotation[, 2]
# Find the predictor with the highest loading for PC2
most_important_predictor_pc2 <- which.max(abs(loadings_pc2))
# Print the result
print(paste("Predictor", most_important_predictor_pc2, "is most important for PC2"))
data <- matrix(c(1, 4, 8,
2, 8, 6,
3, 12, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_90 <- which.max(cumulative_var >= 0.90)
# Print the result
print(num_components_90)
ata <- matrix(c(1, 5, 8,
2, 8, 16,
3, 6, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_90 <- which.max(cumulative_var >= 0.90)
# Print the result
print(num_components_90)
data <- matrix(c(1, 5, 8,
2, 8, 16,
3, 6, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_90 <- which.max(cumulative_var >= 0.90)
# Print the result
print(num_components_90)
data <- matrix(c(1, 4, 8,
2, 8, 16,
3, 7, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_90 <- which.max(cumulative_var >= 0.90)
# Print the result
print(num_components_90)
data <- matrix(c(1, 4, 8,
2, 8, 16,
3, 6, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_90 <- which.max(cumulative_var >= 0.90)
# Print the result
print(num_components_90)
ata <- matrix(c(1, 0, 2,
2, 1, 0,
3, 2, 1), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_90 <- which.max(cumulative_var >= 0.90)
# Print the result
print(num_components_90)
data <- matrix(c(1, 0, 2,
2, 1, 0,
3, 2, 1), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_90 <- which.max(cumulative_var >= 0.90)
# Print the result
print(num_components_90)
data <- matrix(c(1, 0, 2,
2, 1, 0,
3, 2, 1), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_90 <- which.max(cumulative_var = 0.90)
data <- matrix(c(1, 0, 2,
2, 1, 0,
3, 2, 1), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_90 <- which.max(cumulative_var >= 0.90)
# Print the result
print(num_components_90)
data <- matrix(c(1, 4, 8,
2, 8, 16,
3, 12, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_100 <- which.max(cumulative_var >= 100)
# Print the result
print(num_components_100)
ata <- matrix(c(1, 5, 8,
2, 8, 16,
3, 6, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_100 <- which.max(cumulative_var >= 100)
# Print the result
print(num_components_100)
data <- matrix(c(1, 4, 8,
2, 8, 16,
3, 7, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_100 <- which.max(cumulative_var >= 100)
# Print the result
print(num_components_100)
data <- matrix(c(1, 4, 8,
2, 8, 16,
3, 6, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_100 <- which.max(cumulative_var >= 100)
# Print the result
print(num_components_100)
data <- matrix(c(1, 4, 9,
2, 8, 16,
3, 12, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_100 <- which.max(cumulative_var >= 100)
# Print the result
print(num_components_100)
data <- matrix(c(1, 4, 9,
2, 8, 16,
3, 12, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_100 <- which.max(cumulative_var >= 1)
# Print the result
print(num_components_100)
data <- matrix(c(1, 4, 8,
2, 8, 16,
3, 6, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_100 <- which.max(cumulative_var >= 1)
# Print the result
print(num_components_100)
data <- matrix(c(1, 4, 8,
2, 8, 16,
3, 7, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_100 <- which.max(cumulative_var >= 1)
# Print the result
print(num_components_100)
data <- matrix(c(1, 5, 8,
2, 8, 16,
3, 6, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_100 <- which.max(cumulative_var >= 1)
# Print the result
print(num_components_100)
data <- matrix(c(1, 4, 8,
2, 8, 16,
3, 12, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_100 <- which.max(cumulative_var >= 1)
# Print the result
print(num_components_100)
data <- matrix(c(1, 4, 8,
2, 8, 6,
3, 7, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_90 <- sum(cumulative_var < 0.9) + 1
# Print the result
print(num_components_90)
data <- matrix(c(1, 5, 8,
2, 8, 16,
3, 6, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_90 <- sum(cumulative_var < 0.9) + 1
# Print the result
print(num_components_90)
data <- matrix(c(1, 4, 8,
2, 8, 16,
3, 12, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_90 <- sum(cumulative_var < 0.9) + 1
# Print the result
print(num_components_90)
data <- matrix(c(1, 4, 8,
2, 8, 16,
3, 6, 24), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_90 <- sum(cumulative_var < 0.9) + 1
# Print the result
print(num_components_90)
ata <- matrix(c(1, 0, 2,
2, 1, 0,
3, 2, 1), nrow = 3, ncol = 3, byrow = TRUE)
# Perform PCA
pca_result <- prcomp(data, scale. = TRUE)
# Calculate the cumulative proportion of variance explained
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
# Find the number of principal components needed to explain 90% of the variance
num_components_90 <- sum(cumulative_var < 0.9) + 1
# Print the result
print(num_components_90)
